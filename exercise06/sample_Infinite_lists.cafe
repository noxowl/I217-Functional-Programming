mod! GLIST(E :: TRIV) {
    [Nil NnList < List]
    op nil : -> Nil {constr} .
    op _|_ : Elt.E List -> List {constr} .
    -- This operators are example for the finite list.
    -- Because the evaluation of the finite list is assume the nil is the end of the list. and nil(empty) list is exist.
}

mod! INF-LIST(E :: TRIV) {
    pr(NAT)
    pr(GLIST(E))
    [InfList]
    op _|_ : Elt.E InfList -> InfList {strat: (1 0)} .
    op take : InfList Nat -> List .
    op drop : InfList Nat -> InfList .
    op _@_ : List InfList -> InfList .
    op zip : InfList InfList -> InfList .
    op if_then{_}else{_} : Bool InfList InfList -> InfList .
    
    vars X Y : Elt.E .
    vars IL IL1 IL2 : InfList .
    var NzN : NzNat .
    var N : Nat .
    var L : List .

    eq take(IL,0) = nil .
    eq take(X | IL, NzN) = X | take(IL,p NzN) .
    eq drop(IL,0) = IL .
    eq drop(X | IL, NzN) = drop(IL,p NzN) .
    eq nil @ IL = IL .
    eq (X | L) @ IL = X | (L @ IL) .
    eq zip(X | IL,Y | IL2) = X | Y | zip(IL,IL2) .
    eq if true then {IL1} else {IL2} = IL1 .
    eq if false then {IL1} else {IL2} = IL2 .
}

mod! NAT-INF-LIST {
    pr(INF-LIST(NAT)) .
    op mkNILFrom : Nat -> InfList .
    
    var N : Nat .
    
    eq mkNILFrom(N) = N | mkNILFrom(N + 1) .
}

open NAT-INF-LIST .
    red mkNILFrom(0) .
    -- opening module NAT-INF-LIST done.
    -- reduce in %NAT-INF-LIST : (mkNILFrom(0)):InfList
    -- (0 | mkNILFrom(1)):InfList
    -- (0.0000 sec for parse, 0.0000 sec for 1 rewrites + 1 matches)

    red take(mkNILFrom(0),10) .
    -- reduce in %NAT-INF-LIST : (take(mkNILFrom(0),10)):List
    -- (0 | (1 | (2 | (3 | (4 | (5 | (6 | (7 | (8 | (9 | nil)))))))))):List
    -- (0.0000 sec for parse, 0.0001 sec for 41 rewrites + 51 matches)

    red drop(mkNILFrom(0),10) .
    -- reduce in %NAT-INF-LIST : (drop(mkNILFrom(0),10)):InfList
    -- (10 | mkNILFrom((1 + 10))):InfList
    -- (0.0000 sec for parse, 0.0001 sec for 41 rewrites + 51 matches)

    red take(drop(mkNILFrom(0),997),10) .
    -- reduce in %NAT-INF-LIST : (take(drop(mkNILFrom(0),997),10)):List
    -- (997 | (998 | (999 | (1000 | (1001 | (1002 | (1003 | (1004 | (1005 | (1006 | nil)))))))))):List
    -- (0.0000 sec for parse, 0.0065 sec for 4030 rewrites + 5037 matches)

    red take(take(mkNILFrom(0),10) @ drop(mkNILFrom(0),10),20) .
    -- reduce in %NAT-INF-LIST : (take((take(mkNILFrom(0),10) @ drop(mkNILFrom(0),10)),20)):List
    -- (0 | (1 | (2 | (3 | (4 | (5 | (6 | (7 | (8 | (9 | (10 | (11 | (12 | (13 | (14 | (15 | (16 | (17 | (18 | (19 | nil)))))))))))))))))))):List
    -- (0.0000 sec for parse, 0.0004 sec for 154 rewrites + 204 matches)

    red take(mkNILFrom(0),20) .
    -- reduce in %NAT-INF-LIST : (take(mkNILFrom(0),20)):List
    -- (0 | (1 | (2 | (3 | (4 | (5 | (6 | (7 | (8 | (9 | (10 | (11 | (12 | (13 | (14 | (15 | (16 | (17 | (18 | (19 | nil)))))))))))))))))))):List
    -- (0.0000 sec for parse, 0.0001 sec for 81 rewrites + 101 matches)

    red zip(mkNILFrom(0),mkNILFrom(0)) .
    -- reduce in %NAT-INF-LIST : (zip(mkNILFrom(0),mkNILFrom(0))):InfList
    -- (0 | (0 | zip(mkNILFrom(1),mkNILFrom(1)))):InfList
    -- (0.0000 sec for parse, 0.0000 sec for 3 rewrites + 3 matches)

    red take(drop(zip(mkNILFrom(0),mkNILFrom(0)),997),10) .
    -- reduce in %NAT-INF-LIST : (take(drop(zip(mkNILFrom(0),mkNILFrom(0)),997),10)):List
    -- (498 | (499 | (499 | (500 | (500 | (501 | (501 | (502 | (502 | (503 | nil)))))))))):List
    -- (0.0000 sec for parse, 0.0083 sec for 4532 rewrites + 5539 matches)
close

mod! ERATOSTHENES-SIEVE {
    pr(NAT-INF-LIST)
    op primes : -> InfList .
    op sieve : InfList -> InfList .
    op check : Nat InfList -> InfList .
    --
    vars X Y : Nat .
    var NzX : NzNat .
    var IL : InfList .

    -- primes
    eq primes = sieve(mkNILFrom(2)) .
    -- sieve
    eq sieve(X | IL) = X | sieve(check(X,IL)) .
    -- check
    eq check(0,IL) = IL . eq check(NzX,Y | IL) = if NzX divides Y then {check(NzX,IL)} else {Y | check(NzX,IL)} .
}

open ERATOSTHENES-SIEVE .
    red primes .
    -- reduce in %ERATOSTHENES-SIEVE : (primes):InfList
    -- (2 | sieve(check(2,mkNILFrom((1 + 2))))):InfList
    -- (0.0000 sec for parse, 0.0000 sec for 3 rewrites + 3 matches)

    red take(primes,10) .
    -- reduce in %ERATOSTHENES-SIEVE : (take(primes,10)):List
    -- (2 | (3 | (5 | (7 | (11 | (13 | (17 | (19 | (23 | (29 | nil)))))))))):List
    -- (0.0000 sec for parse, 0.0009 sec for 332 rewrites + 483 matches)

    red take(primes,20) .
    -- reduce in %ERATOSTHENES-SIEVE : (take(primes,20)):List
    -- (2 | (3 | (5 | (7 | (11 | (13 | (17 | (19 | (23 | (29 | (31 | (37 | (41 | (43 | (47 | (53 | (59 | (61 | (67 | (71 | nil)))))))))))))))))))):List
    -- (0.0000 sec for parse, 0.0042 sec for 1055 rewrites + 1590 matches)

    red take(primes,50) .
    -- reduce in %ERATOSTHENES-SIEVE : (take(primes,50)):List
    -- (2 | (3 | (5 | (7 | (11 | (13 | (17 | (19 | (23 | (29 | (31 | (37 | (41 | (43 | (47 | (53 | (59 | (61 | (67 | (71 | (73 | (79 | (83 | (89 | (97 | (101 | (103 | (107 | (109 | (113 | (127 | (131 | (137 | (139 | (149 | (151 | (157 | (163 | (167 | (173 | (179 | (181 | (191 | (193 | (197 | (199 | (211 | (223 | (227 | (229 | nil)))))))))))))))))))))))))))))))))))))))))))))))))):List
    -- (0.0000 sec for parse, 0.0330 sec for 5332 rewrites + 8345 matches)

    red take(primes,100) .
    -- reduce in %ERATOSTHENES-SIEVE : (take(primes,100)):List
    -- (2 | (3 | (5 | (7 | (11 | (13 | (17 | (19 | (23 | (29 | (31 | (37 | (41 | (43 | (47 | (53 | (59 | (61 | (67 | (71 | (73 | (79 | (83 | (89 | (97 | (101 | (103 | (107 | (109 | (113 | (127 | (131 | (137 | (139 | (149 | (151 | (157 | (163 | (167 | (173 | (179 | (181 | (191 | (193 | (197 | (199 | (211 | (223 | (227 | (229 | (233 | (239 | (241 | (251 | (257 | (263 | (269 | (271 | (277 | (281 | (283 | (293 | (307 | (311 | (313 | (317 | (331 | (337 | (347 | (349 | (353 | (359 | (367 | (373 | (379 | (383 | (389 | (397 | (401 | (409 | (419 | (421 | (431 | (433 | (439 | (443 | (449 | (457 | (461 | (463 | (467 | (479 | (487 | (491 | (499 | (503 | (509 | (521 | (523 | (541 | nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))):List
    -- (0.0000 sec for parse, 0.1920 sec for 18953 rewrites + 30314 matches)
close

mod! HAMMING {
    pr(NAT-INF-LIST)
    op ham : -> InfList .
    op 2* : InfList -> InfList .
    op 3* : InfList -> InfList .
    op 5* : InfList -> InfList .
    op merge : InfList InfList -> InfList .
    
    vars X Y : Nat .
    vars IL IL2 : InfList .
    -- ham
    eq ham = 1 | merge(merge(2*(ham),3*(ham)),5*(ham)) .
    -- 2*
    eq 2*(X | IL) = 2 * X | 2*(IL) . 
    -- 3*
    eq 3*(X | IL) = 3 * X | 3*(IL) .
    -- 5*
    eq 5*(X | IL) = 5 * X | 5*(IL) .
    -- merge
    eq merge(X | IL,Y | IL2) = if X < Y then {X | merge(IL,Y | IL2)} else {if Y < X then {Y | merge(X | IL,IL2)} else {X | merge(IL,IL2)} } .
}

open HAMMING .
    red ham .
    -- reduce in %HAMMING : (ham):InfList
    -- (1 | merge(merge(2*(ham),3*(ham)),5*(ham))):InfList
    -- (0.0000 sec for parse, 0.0000 sec for 1 rewrites + 1 matches)

    red take(ham,10) .
    -- reduce in %HAMMING : (take(ham,10)):List
    -- (1 | (2 | (3 | (4 | (5 | (6 | (8 | (9 | (10 | (12 | nil)))))))))):List
    -- (0.0000 sec for parse, 0.0018 sec for 404 rewrites + 438 matches)
    
    red take(ham,20) .
    -- reduce in %HAMMING : (take(ham,20)):List
    -- (1 | (2 | (3 | (4 | (5 | (6 | (8 | (9 | (10 | (12 | (15 | (16 | (18 | (20 | (24 | (25 | (27 | (30 | (32 | (36 | nil)))))))))))))))))))):List
    -- (0.0000 sec for parse, 0.0101 sec for 1370 rewrites + 1484 matches)

    red take(ham,50) .
    -- reduce in %HAMMING : (take(ham,50)):List
    -- (1 | (2 | (3 | (4 | (5 | (6 | (8 | (9 | (10 | (12 | (15 | (16 | (18 | (20 | (24 | (25 | (27 | (30 | (32 | (36 | (40 | (45 | (48 | (50 | (54 | (60 | (64 | (72 | (75 | (80 | (81 | (90 | (96 | (100 | (108 | (120 | (125 | (128 | (135 | (144 | (150 | (160 | (162 | (180 | (192 | (200 | (216 | (225 | (240 | (243 | nil)))))))))))))))))))))))))))))))))))))))))))))))))):List
    -- (0.0000 sec for parse, 0.1834 sec for 10826 rewrites + 11788 matches)

    red take(ham,100) .
    -- reduce in %HAMMING : (take(ham,100)):List
    -- (1 | (2 | (3 | (4 | (5 | (6 | (8 | (9 | (10 | (12 | (15 | (16 | (18 | (20 | (24 | (25 | (27 | (30 | (32 | (36 | (40 | (45 | (48 | (50 | (54 | (60 | (64 | (72 | (75 | (80 | (81 | (90 | (96 | (100 | (108 | (120 | (125 | (128 | (135 | (144 | (150 | (160 | (162 | (180 | (192 | (200 | (216 | (225 | (240 | (243 | (250 | (256 | (270 | (288 | (300 | (320 | (324 | (360 | (375 | (384 | (400 | (405 | (432 | (450 | (480 | (486 | (500 | (512 | (540 | (576 | (600 | (625 | (640 | (648 | (675 | (720 | (729 | (750 | (768 | (800 | (810 | (864 | (900 | (960 | (972 | (1000 | (1024 | (1080 | (1125 | (1152 | (1200 | (1215 | (1250 | (1280 | (1296 | (1350 | (1440 | (1458 | (1500 | (1536 | nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))):List
    -- (0.0000 sec for parse, 3.4320 sec for 72940 rewrites + 79462 matches)
close
