mod! GCD {
    -- imports
    pr(NAT)

    -- signature
    op gcd : Nat Zero -> Nat .
    op gcd : Nat NzNat -> NzNat .
    op gcd : Nat Nat -> Nat .

    -- CafeOBJ vars
    var X : Nat .
    var NzY : NzNat .

    -- equations
    eq gcd(X, 0) = X .
    eq gcd(X, NzY) = gcd(NzY, X rem NzY) .
}

mod! LCM {
    pr(GCD)
    op lcm : Nat Zero -> Zero .
    op lcm : Nat NzNat -> Nat .
    op lcm : Nat Nat -> Nat .
    var X : Nat .
    var NzY : NzNat .
    eq lcm(X, 0) = 0 .
    eq lcm(X, NzY) = (X quo gcd(X, NzY)) * NzY .
}

mod! NAT-ERR { 
    pr(NAT)
    [Nat ErrNat < Nat&Err]
    op errNat : -> ErrNat {constr} .
    op p_ : Zero -> ErrNat .
    op p_ : ErrNat -> ErrNat .
    op p_ : Nat&Err -> Nat&Err .
    op _quo_ : Nat&Err Zero -> ErrNat .
    op _quo_ : Nat&Err ErrNat -> ErrNat .
    op _quo_ : ErrNat Nat&Err -> ErrNat .
    op _quo_ : Nat&Err Nat&Err -> Nat&Err .
    
    var NE : Nat&Err .
    eq p 0 = errNat .
    eq p errNat = errNat .
    eq NE quo 0 = errNat .
    eq NE quo errNat = errNat .
    eq errNat quo NE = errNat .
}

mod! NATLIST {
    pr(NAT-ERR) 
    [Nil NnNatList < NatList]
    -- NnNatList is a Number and a NatList
    -- Nil is an empty list
    -- NatList is either Nil or NnNatList
    
    op nil : -> Nil {constr} .
    op _|_ : Nat NatList -> NnNatList {constr} .
    -- X | L is a list with head X and tail L
    -- a.g. 1 | 2 | 3 | nil is a list with head 1, tail 2 | 3 | nil

    op hd : Nil -> ErrNat . -- hd(nil) is an error
    op hd : NnNatList -> Nat . -- hd(X | L) is X. 
    op hd : NatList -> Nat&Err . -- hd(L) is either X or an error. a.g. hd(nil) is an error, hd(X | L) is X
    op tl : NatList -> NatList . -- tl(L) is the tail of L. tl(nil) is nil.
    op _@_ : NatList NatList -> NatList . -- L @ L2 is the concatenation of L and L2

    op [_.._] : Nat Nat -> NatList .
    op if_then {_} else {_} : Bool NatList NatList -> NatList .

    vars X Y : Nat .
    vars L L2 : NatList .

    eq hd(nil) = errNat .
    eq hd(X | L) = X .

    eq tl(nil) = nil .
    eq tl(X | L) = L .

    eq nil @ L2 = L2 .
    eq (X | L) @ L2 = X | (L @ L2) .
    
    eq [X .. Y] = if X > Y then {nil} else {X | [X + 1 .. Y]} .
    eq if true then {L} else {L2} = L .
    eq if false then {L} else {L2} = L2 .
}

mod! QSORT {
    -- imports
    pr(NATLIST) .
    
    -- signature
    op qsort : NatList -> NatList . 
    op partition : Nat NatList NatList NatList -> NatList . 
    
    -- CafeOBJ vars
    vars X Y : Nat .
    vars L LL RL : NatList .

    -- equations
    -- sort
    eq qsort(nil) = nil .
    eq qsort(X | nil) = X | nil .
    eq qsort(X | Y | L) = partition(X,Y | L,nil,nil) . 
    
    -- partition
    eq partition(X,nil,LL,RL) = qsort(LL) @ (X | qsort(RL)) .
    eq partition(X,Y | L,LL,RL) = if Y < X then {partition(X,L,Y | LL,RL)} else {partition(X,L,LL,Y | RL)} .
}

mod! ERATOSTHENES-SIEVE {
    -- imports
    pr(NATLIST)
    -- signature
    op primesUpto : Nat -> NatList .
    op sieve : NatList -> NatList .
    op check : Nat NatList -> NatList .
    
    -- CafeOBJ vars
    vars X Y : Nat .
    var NzX : NzNat .
    var L : NatList .

    -- equations
    -- primesUpto
    eq primesUpto(X) = sieve([2 .. X]) .
    
    -- sieve
    eq sieve(nil) = nil .
    eq sieve(X | L) = X | sieve(check(X,L)) .
    
    -- check
    eq check(0,L) = L .
    eq check(NzX,nil) = nil .
    eq check(NzX,Y | L) = if NzX divides Y then {check(NzX,L)} else {Y | check(NzX,L)} .
}

-- test

open GCD .
    red gcd(24,36) .
    -- reduce in %GCD : (gcd(24,36)):NzNat
    -- (12):NzNat
    -- (0.0000 sec for parse, 0.0000 sec for 7 rewrites + 7 matches)

    red gcd(2015,31031) .
    -- reduce in %GCD : (gcd(2015,31031)):NzNat
    -- (403):NzNat
    -- (0.0000 sec for parse, 0.0000 sec for 9 rewrites + 9 matches)
close

open LCM .
    red lcm(24, 36) .
    -- reduce in %LCM : (lcm(24,36)):Nat
    -- (72):NzNat
    -- (0.0000 sec for parse, 0.0000 sec for 10 rewrites + 11 matches)

    red lcm(2015, 31031) .
    -- reduce in %LCM : (lcm(2015,31031)):Nat
    -- (155155):NzNat
    -- (0.0000 sec for parse, 0.0000 sec for 12 rewrites + 13 matches)
close

open NAT-ERR .
    red p 1 .
    -- reduce in %NAT-ERR : (p 1):Nat
    -- (0):Zero
    -- (0.0000 sec for parse, 0.0000 sec for 1 rewrites + 1 matches)

    red p 0 .
    -- reduce in %NAT-ERR : (p 0):ErrNat
    -- (errNat):ErrNat
    -- (0.0000 sec for parse, 0.0000 sec for 1 rewrites + 1 matches)
    
    red p errNat .
    -- reduce in %NAT-ERR : (p errNat):ErrNat
    -- (errNat):ErrNat
    -- (0.0000 sec for parse, 0.0000 sec for 1 rewrites + 1 matches)

    red 10 quo 3 .
    -- reduce in %NAT-ERR : (10 quo 3):Nat
    -- (3):NzNat
    -- (0.0000 sec for parse, 0.0000 sec for 1 rewrites + 1 matches)

    red 10 quo 0 .
    -- reduce in %NAT-ERR : (10 quo 0):ErrNat
    -- (errNat):ErrNat
    -- (0.0000 sec for parse, 0.0000 sec for 1 rewrites + 1 matches)

    red 10 quo errNat .
    -- reduce in %NAT-ERR : (10 quo errNat):ErrNat
    -- (errNat):ErrNat
    -- (0.0000 sec for parse, 0.0000 sec for 1 rewrites + 1 matches)

    red errNat quo 3 .
    -- reduce in %NAT-ERR : (errNat quo 3):ErrNat
    -- (errNat):ErrNat
    -- (0.0000 sec for parse, 0.0000 sec for 1 rewrites + 1 matches)

    red errNat quo errNat .
    -- reduce in %NAT-ERR : (errNat quo errNat):?Nat&Err
    -- (errNat quo errNat):?Nat&Err
    -- (0.0000 sec for parse, 0.0000 sec for 0 rewrites + 0 matches)
close

open QSORT . 
    red qsort(4 | 7 | 5 | 1 | 0 | 3 | 6 | 2 | nil) .
    -- reduce in %QSORT : (qsort((4 | (7 | (5 | (1 | (0 | (3 | (6 | (2 | nil)))))))))):NatList
    -- (0 | (1 | (2 | (3 | (4 | (5 | (6 | (7 | nil)))))))):NnNatList
close

open ERATOSTHENES-SIEVE .
    red primesUpto(10) .
    -- reduce in %ERATOSTHENES-SIEVE : (primesUpto(10)):NatList
    -- (2 | (3 | (5 | (7 | nil)))):NnNatList
    -- (0.0000 sec for parse, 0.0002 sec for 85 rewrites + 133 matches)

    red primesUpto(20) .
    -- reduce in %ERATOSTHENES-SIEVE : (primesUpto(20)):NatList
    -- (2 | (3 | (5 | (7 | (11 | (13 | (17 | (19 | nil)))))))):NnNatList
    -- (0.0000 sec for parse, 0.0007 sec for 220 rewrites + 367 matches)

    red primesUpto(50) .
    -- reduce in %ERATOSTHENES-SIEVE : (primesUpto(50)):NatList
    -- (2 | (3 | (5 | (7 | (11 | (13 | (17 | (19 | (23 | (29 | (31 | (37 | (41 | (43 | (47 | nil))))))))))))))):NnNatList
    -- (0.0000 sec for parse, 0.0042 sec for 690 rewrites + 1194 matches)

    red primesUpto(100) .
    -- reduce in %ERATOSTHENES-SIEVE : (primesUpto(100)):NatList
    -- (2 | (3 | (5 | (7 | (11 | (13 | (17 | (19 | (23 | (29 | (31 | (37 | (41 | (43 | (47 | (53 | (59 | (61 | (67 | (71 | (73 | (79 | (83 | (89 | (97 | nil))))))))))))))))))))))))):NnNatList
    -- (0.0000 sec for parse, 0.0154 sec for 1684 rewrites + 2992 matches)
close
