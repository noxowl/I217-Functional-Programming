mod! PAIR(FE :: TRIV, SE :: TRIV) { 
    [Pair]
    op (_,_) : Elt.FE Elt.SE -> Pair {constr} .
}

mod! TRIPLE(FE :: TRIV, SE :: TRIV, TE :: TRIV) {
    [Triple]
    op (_,_,_) : Elt.FE Elt.SE Elt.TE -> Triple {constr} .
}

mod* TRIV-ERR-IF {
    [Elt Err < Elt&Err]
    op err : -> Err .
    op if_then{_}else{_} : Bool Elt&Err Elt&Err -> Elt&Err .
}

mod! ENTRY(K :: TRIV, V :: TRIV-ERR-IF) {
    pr(PAIR(K, V) * {sort Pair -> Entry})
    [Entry ErrEntry < Entry&Err]
    op errEntry : -> ErrEntry {constr} .
    op (_,_) : Elt.K Elt&Err.V -> Entry&Err . 
    -- V에 에러가 존재할 수 있으므로 Err를 포함한다.
    var K : Elt.K . 
    -- K에는 에러가 존재하지 않는다고 가정한다.
    eq (K, err.V) = errEntry . 
    -- 만약 V에 에러가 존재한다면 ErrEntry를 반환한다. (어떤 K가 들어오더라도, V에 에러가 존재하면) = ErrEntry 이다.
}


mod! GLIST-ERR(E :: TRIV-ERR) {
    [Nil NnList < List]
    [List ErrList < List&Err]
    op errList : -> ErrList {constr} . op nil : -> Nil {constr} .
    op _|_ : Elt.E List -> List {constr} . op _|_ : Elt&Err.E List&Err -> List&Err . op _@_ : List List -> List .
    op _@_ : List&Err List&Err -> List&Err . op if_then{_}else{_}
    : Bool List&Err List&Err -> List&Err .
    var X : Elt.E .
    var XE : Elt&Err.E .
    vars L L2 : List .
    vars LE LE2 : List&Err .
    -- _|_
    eq err.E | LE = errList .
    eq XE | errList = errList .
    -- _@_
    eq nil @ L2 = L2 .
    eq (X | L) @ L2 = X | (L @ L2) .
    eq errList @ LE = errList .
    eq LE @ errList = errList .
    -- if_then{_}else{_}
    eq if true then {LE} else {LE2} = LE .
    eq if false then {LE} else {LE2} = LE2 .
}

mod! BOOL-ERR {
    [Bool ErrBool < Bool&Err]
    op errBool : -> ErrBool {constr} .
    op if_then{_}else{_} : Bool Bool Bool -> Bool .
    vars B1 B2 : Bool .
    -- if_then{_}else{_}
    eq if true then {B1} else {B2} = B1 .
    eq if false then {B1} else {B2} = B2 .
}

mod! NAT-ERR principal-sort Nat {
    pr(NAT)
    [Nat ErrNat < Nat&Err]
    op errNat : -> ErrNat {constr} .
    op _*_ : Nat&Err Nat&Err -> Nat&Err .
    op if_then{_}else{_} : Bool Nat&Err Nat&Err -> Nat&Err .
    vars NE NE1 NE2 : Nat&Err .
    eq errNat * NE = errNat .
    eq NE * errNat = errNat .
    eq if true then {NE1} else {NE2} = NE1 .
    eq if false then {NE1} else {NE2} = NE2 .
}

mod! TABLE {
    pr(BOOL-ERR)
    -- view를 통해 TRIV-ERR의 sort나 operator를 ENTRY의 것으로 置き換える.
    pr(GLIST-ERR(E <= view from TRIV-ERR to ENTRY {
        sort Elt -> Entry,
        sort Err -> ErrEntry,
        sort Elt&Err -> Entry&Err,
        op err -> errEntry
    })
    * {
        sort List -> Table,
        sort Nil -> EmpTable,
        sort NnList -> NeTable,
        sort ErrList -> ErrTable,
        sort List&Err -> Table&Err,
        op errList -> errTable,
        op nil -> empTable,
    })
    vars K K2 : Elt.K .
    vars V V2 : Elt.V .
    vars VE VE2 : Elt&Err.V .
    var T : Table .
    var TE : Table&Err .

    -- Table
    op singleton : Elt.K Elt.V -> Table .
    op singleton : Elt.K Elt&Err.V -> Table&Err .
    eq singleton(K,err.V) = errTable .
    eq singleton(K,V) = (K,V) | empTable .

    -- Key가 Table에 존재하는지 확인
    op isReg : Table Elt.K -> Bool .
    op isReg : Table&Err Elt.K -> Bool&Err .
    eq isReg(errTable,K2) = errBool .
    -- 검색하는 Table 자체가 errTable이므로 errBool을 반환한다.
    eq isReg(empTable,K2) = false .
    -- empty table에는 key가 존재하지 않는다.
    eq isReg((K,V) | T,K2) = if K == K2 then {true} else {isReg(T,K2)} .

    -- Table에서 Key에 해당하는 Value를 찾는다.
    op lookup : Table Elt.K -> Elt&Err.V .
    op lookup : Table&Err Elt.K -> Elt&Err.V .
    eq lookup(errTable,K2) = err.V .
    -- 검색하는 Table 자체가 errTable이므로 err.V를 반환한다.
    eq lookup(empTable,K2) = err.V .
    -- empty table에는 key가 존재하지 않으므로 err.V를 반환한다.
    eq lookup((K,V) | T,K2) = if K == K2 then {V} else {lookup(T,K2)} .
    -- Table의 Key와 Value를 업데이트한다. (중복인 경우 덮어씌운다)
    op update : Table Elt.K Elt.V -> Table .
    op update : Table&Err Elt.K Elt&Err.V -> Table&Err .
    eq update(errTable,K2,VE2) = errTable .
    eq update(TE,K2,err.V) = errTable .
    eq update(empTable,K2,V2) = (K2,V2) | empTable .
    eq update((K,V) | T,K2,V2) = if K == K2 then {(K,V2) | T} else {(K,V) | update(T,K2,V2)} .

    -- Table에 Key와 Value를 추가한다. (중복에 대한 에러 있음)
    op insert : Table Elt.K Elt.V -> Table&Err .
    op insert : Table&Err Elt.K Elt&Err.V -> Table&Err .
    eq insert(errTable,K2,VE) = errTable .
    eq insert(TE,K2,err.V) = errTable .
    eq insert(T,K2,V2) = if isReg(T,K2) then {errTable} else {(K2,V2) | T} .

    -- Table에서 해당하는 Key의 Value를 삭제한다. (원래 에러인 경우를 제외하고 처리 결과에 대한 에러 없음)
    op remove : Table Elt.K -> Table .
    op remove : Table&Err Elt.K -> Table&Err .
    eq remove(errTable,K2) = errTable .
    eq remove(empTable,K2) = empTable .
    eq remove((K,V) | T,K2) = if K == K2 then {T} else {(K,V) | remove(T,K2)} .

    -- Table에서 해당하는 Key의 Value를 삭제한다. (원래 에러인 경우를 포함하여 처리 결과에 대한 에러 있음)
    op delete : Table Elt.K -> Table&Err .
    op delete : Table&Err Elt.K -> Table&Err .
    eq delete(errTable,K2) = errTable .
    eq delete(T,K2) = if isReg(T,K2) then {remove(T,K2)} else {errTable} .
}

-- 이하는 Table의 실제 사용
mod! STRING-ERR principal-sort String {
    pr(STRING)
    [String ErrString < String&Err]
    op errStr : -> ErrString {constr} .
    op if_then{_}else{_} : Bool String&Err String&Err -> String&Err .
    vars SE1 SE2 : String&Err .
    eq if true then {SE1} else {SE2} = SE1 .
    eq if false then {SE1} else {SE2} = SE2 .
}

-- The built‐in module in which quoted IDs are defined
-- View mapping 안에서는 주석을 사용할 수 없다.
view TRIV2QID from TRIV to QID {
    sort Elt -> Qid
}

view TRIV-ERR-IF2STRING-ERR from TRIV-ERR-IF to STRING-ERR {
    sort Elt -> String,
    sort Err -> ErrString,
    sort Elt&Err -> String&Err,
    op err -> errStr,
    op (if_then{_}else{_}) -> (if_then{_}else{_}),
}
-- Mix‐fix operators should be enclosed with ( and ) when they appears in views.

open TABLE(K <= TRIV2QID, V <= TRIV-ERR-IF2STRING-ERR) .
    op t : -> Table .
    eq t = update(update(singleton('java,"Java"),'obj,"OBJ3"),'c,"C").

    red t .
    -- reduce in %TABLE(K <= TRIV2QID, V <= TRIV-ERR-IF2STRING-ERR) : (t):Table
    -- (('java , "Java") | (('obj , "OBJ3") | (('c , "C") | empTable))):Table
    -- (0.0000 sec for parse, 0.0000 sec for 13 rewrites + 19 matches)

    red isReg(t,'obj) .
    -- reduce in %TABLE(K <= TRIV2QID, V <= TRIV-ERR-IF2STRING-ERR) : (isReg(t,'obj)):Bool
    -- (true):Bool
    -- (0.0000 sec for parse, 0.0000 sec for 19 rewrites + 28 matches)

    red isReg(t,'mk) .
    -- reduce in %TABLE(K <= TRIV2QID, V <= TRIV-ERR-IF2STRING-ERR) : (isReg(t,'mk)):Bool
    -- (false):Bool
    -- (0.0000 sec for parse, 0.0000 sec for 23 rewrites + 35 matches)

    red lookup(t,'obj) .
    -- reduce in %TABLE(K <= TRIV2QID, V <= TRIV-ERR-IF2STRING-ERR) : (lookup(t,'obj)):String&Err
    -- ("OBJ3"):String
    -- (0.0000 sec for parse, 0.0001 sec for 19 rewrites + 28 matches)
    
    red lookup(t,'mk) .
    -- reduce in %TABLE(K <= TRIV2QID, V <= TRIV-ERR-IF2STRING-ERR) : (lookup(t,'mk)):String&Err
    -- (errStr):ErrString
    -- (0.0000 sec for parse, 0.0000 sec for 23 rewrites + 35 matches)
    
    red update(t,'mk,"SML#") .
    -- reduce in %TABLE(K <= TRIV2QID, V <= TRIV-ERR-IF2STRING-ERR) : (update(t,'mk,"SML#")):Table
    -- (('java , "Java") | (('obj , "OBJ3") | (('c , "C") | (('mk , "SML#") | empTable)))):Table
    -- (0.0000 sec for parse, 0.0000 sec for 23 rewrites + 35 matches)
    
    red update(t,'obj,"CafeOBJ") .
    -- reduce in %TABLE(K <= TRIV2QID, V <= TRIV-ERR-IF2STRING-ERR) : (update(t,'obj,"CafeOBJ")):Table
    -- (('java , "Java") | (('obj , "CafeOBJ") | (('c , "C") | empTable))):Table
    -- (0.0000 sec for parse, 0.0000 sec for 19 rewrites + 28 matches)
    
    red insert(t,'mk,"SML#") .
    -- reduce in %TABLE(K <= TRIV2QID, V <= TRIV-ERR-IF2STRING-ERR) : (insert(t,'mk,"SML#")):Table&Err
    -- (('mk , "SML#") | (('java , "Java") | (('obj , "OBJ3") | (('c , "C") | empTable)))):Table
    -- (0.0000 sec for parse, 0.0001 sec for 25 rewrites + 38 matches)
    
    red insert(t,'obj,"CafeOBJ") .
    -- reduce in %TABLE(K <= TRIV2QID, V <= TRIV-ERR-IF2STRING-ERR) : (insert(t,'obj,"CafeOBJ")):Table&Err
    -- (errTable):ErrTable
    -- (0.0000 sec for parse, 0.0000 sec for 21 rewrites + 30 matches)
    
    red remove(t,'mk) .
    -- reduce in %TABLE(K <= TRIV2QID, V <= TRIV-ERR-IF2STRING-ERR) : (remove(t,'mk)):Table
    -- (('java , "Java") | (('obj , "OBJ3") | (('c , "C") | empTable))):Table
    -- (0.0000 sec for parse, 0.0000 sec for 23 rewrites + 35 matches)
    
    red remove(t,'obj) .
    -- reduce in %TABLE(K <= TRIV2QID, V <= TRIV-ERR-IF2STRING-ERR) : (remove(t,'obj)):Table
    -- (('java , "Java") | (('c , "C") | empTable)):Table
    -- (0.0000 sec for parse, 0.0000 sec for 19 rewrites + 28 matches)
    
    red delete(t,'mk) .
    -- reduce in %TABLE(K <= TRIV2QID, V <= TRIV-ERR-IF2STRING-ERR) : (delete(t,'mk)):Table&Err
    -- (errTable):ErrTable
    -- (0.0000 sec for parse, 0.0000 sec for 25 rewrites + 38 matches)
    
    red delete(t,'obj) .
    -- reduce in %TABLE(K <= TRIV2QID, V <= TRIV-ERR-IF2STRING-ERR) : (delete(t,'obj)):Table&Err
    -- (('java , "Java") | (('c , "C") | empTable)):Table
    -- (0.0000 sec for parse, 0.0001 sec for 27 rewrites + 39 matches)
close
