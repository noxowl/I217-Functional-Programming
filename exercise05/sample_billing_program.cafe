mod! TAG {
    pr(PAIR(STRING-ERR, NAT-ERR) * {sort Pair -> Tag})
    [Tag ErrTag < Tag&Err]
    op errTag : -> ErrTag {constr} .
    op (_,_) : String&Err Nat&Err -> Tag&Err .
    op if_then{_}else{_} : Bool Tag&Err Tag&Err -> Tag&Err .
    
    var SE : String&Err .
    var NE : Nat&Err .
    vars TE1 TE2 : Tag&Err .

    -- (_,_)
    eq (errStr, NE) = errTag .
    eq (SE, errNat) = errTag .
    
    -- if_then{_}else{_}
    eq if true then {TE1} else {TE2} = TE1 .
    eq if false then {TE1} else {TE2} = TE2 .
}

view TRIV-ERR-IF2TAG from TRIV-ERR-IF to TAG {
    sort Elt -> Tag,
    sort Err -> ErrTag,
    sort Elt&Err -> Tag&Err,
    
    op err -> errTag,
    op (if_then {_} else {_}) -> (if_then {_} else {_}),
}

mod! CATALOG {
    pr(TABLE(K <= TRIV2QID, V <= TRIV-ERR-IF2TAG) * {
        sort Table -> Catalog,
        sort EmpTable -> EmpCatalog,
        sort NeTable -> NeCatalog,
        sort ErrTable -> ErrCatalog,
        sort Table&Err -> Catalog&Err,
        op empTable -> empCatalog,
        op errTable -> errCatalog
        }
    )
}

open CATALOG .
    op cat : -> Catalog .
    eq cat = ('a, ("apple", 150)) | ('o, ("orange", 100)) | ('t, ("tomato", 90)) | empCatalog .

    red cat .
    -- reduce in %CATALOG : (cat):Catalog
    -- (('a , ("apple" , 150)) | (('o , ("orange" , 100)) | (('t , ("tomato" , 90)) | empCatalog))):Catalog
    -- (0.0000 sec for parse, 0.0000 sec for 1 rewrites + 1 matches)
close

mod! CART-ITEM {
    pr(PAIR(QID, NAT-ERR) * {
        sort Pair -> CItem
        }
    )
    [CItem ErrCItem < CItem&Err]
    op errCItem : -> ErrCItem {constr} .
}

view TRIV-ERR2CART-ITEM from TRIV-ERR to CART-ITEM {
    sort Elt -> CItem,
    sort Err -> ErrCItem,
    sort Elt&Err -> CItem&Err,
    op err -> errCItem,
}

mod! CART {
    pr(GLIST-ERR(E <= TRIV-ERR2CART-ITEM) * {
        sort List -> Cart,
        sort Nil -> EmpCart,
        sort NnList -> NeCart,
        sort ErrList -> ErrCart,
        sort List&Err -> Cart&Err,
        
        op nil -> empCart,
        op errList -> errCart,
        }
    )

    op norm : Cart -> Cart .
    op mkCart : Cart CItem -> Cart .
    vars I I2 : Qid .
    vars N N2 : Nat .
    var C : Cart .
    
    -- norm
    eq norm(empCart) = empCart .
    eq norm((I,N) | C) = mkCart(norm(C),(I,N)) .
    
    -- mkCart
    eq mkCart(empCart,(I,N)) = (I,N) | empCart .
    eq mkCart((I2,N2) | C,(I,N)) = if I == I2 then {(I,N + N2) | C} else {(I2,N2) | mkCart(C,(I,N))} .
}

open CART .
    op c : -> Cart .
    eq c = ('o,4) | ('t,10) | ('o,6) | empCart .

    red norm(c) .
    -- reduce in %CART : (norm(c)):Cart
    -- (('o , 10) | (('t , 10) | empCart)):Cart
    -- (0.0000 sec for parse, 0.0001 sec for 14 rewrites + 20 matches)
close

mod! BILL-ITEM {
    pr(TRIPLE(STRING-ERR,NAT-ERR,NAT-ERR) * {
        sort Triple -> BItem
        }
    )
    [BItem ErrBItem < BItem&Err]
    op errBItem : -> ErrBItem {constr} .
    op (_,_,_) : String&Err Nat&Err Nat&Err -> BItem&Err .
    
    var SE : String&Err .
    vars NE1 NE2 : Nat&Err .
    
    eq (errStr,NE1,NE2) = errBItem .
    eq (SE,errNat,NE2) = errBItem . 
}

view TRIV-ERR2BILL-ITEM from TRIV-ERR to BILL-ITEM {
    sort Elt -> BItem,
    sort Err -> ErrBItem,
    sort Elt&Err -> BItem&Err,
    op err -> errBItem,
}

mod! BILIST principal-sort BIList {
    pr(GLIST-ERR(E <= TRIV-ERR2BILL-ITEM) * {
        sort List -> BIList,
        sort Nil -> NilBIList,
        sort NnList -> NnBIList,
        sort ErrList -> ErrBIList,
        sort List&Err -> BIList&Err,
        op nil -> nilBIL,
        op errList -> errBIL,
        }
    )
    op total : BIList -> Nat .
    op total : BIList&Err -> Nat&Err .
    var S : String .
    vars N ST : Nat .
    var BIL : BIList .

    eq total(errBIL) = errNat .
    eq total(nilBIL) = 0 .
    eq total((S,N,ST) | BIL) = ST + total(BIL) .
}

mod! BILL {
    pr(CATALOG)
    pr(CART)
    pr(PAIR(BILIST,NAT-ERR) * {
        sort Pair -> Bill
        }
    )
    [Bill ErrBill < Bill&Err]
    op errBill : -> ErrBill {constr} .
    op (_,_) : BIList&Err Nat&Err -> Bill&Err .
    op mkBill : Catalog Cart -> Bill&Err .
    op mkSubBill : BIList&Err -> Bill&Err .
    op mkBIL : Catalog Cart -> BIList&Err .
    op mkSubBIL : Tag&Err Catalog Cart Nat -> BIList&Err .
    var BILE : BIList&Err .
    var BIL : BIList .
    var NE : Nat&Err .
    var CAT : Catalog .
    var I : Qid .
    vars N P : Nat .
    var IN : String .
    var C : Cart .

    -- (_,_)
    eq (errBIL,NE) = errBill .
    eq (BILE,errNat) = errBill .
    -- mkBill
    eq mkBill(CAT,C) = mkSubBill(mkBIL(CAT,norm(C))) .
    -- mkSubBill
    eq mkSubBill(errBIL) = errBill .
    eq mkSubBill(BIL) = (BIL,total(BIL)) .
    -- mkBIL
    eq mkBIL(CAT,empCart) = nilBIL .
    eq mkBIL(CAT,(I,N) | C) = mkSubBIL(lookup(CAT,I),CAT,C,N) .
    -- mkSubBIL
    eq mkSubBIL(errTag,CAT,C,N) = errBIL .
    eq mkSubBIL((IN,P),CAT,C,N) = (IN,N,N * P) | mkBIL(CAT,C) .
}

open BILL .
    op cat : -> Catalog .
    eq cat = ('a,("apple",150)) | ('o,("orange",100)) | ('t,("tomato",90)) | empCatalog .
    op c : -> Cart .
    eq c = ('o,4) | ('t,10) | ('o,6) | empCart .
    
    red mkBill(cat,c) .
    -- reduce in %BILL : (mkBill(cat,c)):Bill&Err
    -- ((("orange" , 10 , 1000) | (("tomato" , 10 , 900) | nilBIL)) , 1900):Bill
    -- (0.0000 sec for parse, 0.0002 sec for 44 rewrites + 69 matches)
close

open BILL .
    op cat : -> Catalog .
    ops c1 c2 : -> Cart .
    eq cat = ('a,("apple",150)) | ('o,("orange",100)) | ('t,("tomato",90)) | ('b,("banana",140)) | ('p,("potato",30)) | empCatalog .
    eq c1 = ('p,3) | ('o,2) | ('a,3) | ('p,10) | ('b,10) | ('o,10) | ('t,20) | empCart .
    eq c2 = ('p,3) | ('o,2) | ('f,10) | ('a,3) | empCart .

    red mkBill(cat,c1) .
    -- reduce in %BILL : (mkBill(cat,c1)):Bill&Err
    -- ((("tomato" , 20 , 1800) | (("orange" , 12 , 1200) | (("banana" , 10 , 1400) | (("potato" , 13 , 390) | (("apple" , 3 , 450) | nilBIL))))) , 5240):Bill
    -- (0.0000 sec for parse, 0.0005 sec for 139 rewrites + 227 matches)

    red mkBill(cat,c2) .
    -- reduce in %BILL : (mkBill(cat,c2)):Bill&Err
    -- (errBill):ErrBill
    -- (0.0000 sec for parse, 0.0002 sec for 56 rewrites + 87 matches)
close
