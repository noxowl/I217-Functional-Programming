-- FQlock: A Flawed Version of Qlock

mod! QUEUE(E :: TRIV) {
    [Elt.E < Queue]
    op emq : -> Queue {constr} .
    op _;_ : Queue Queue -> Queue {constr assoc id: emq} .
}

mod! OCOMP principal-sort OComp {
    pr(QUEUE(TID))
    pr(LOC)
    [OComp]
    op (pc[_]:_) : Tid Loc -> OComp {constr} .
    op (tmp[_]:_) : Tid Queue -> OComp {constr} .
    op (queue:_) : Queue -> OComp {constr} .
}

mod! STATE {
    pr(MULTISET(OCOMP) * {
        sort MSet -> OComps
        }
    )
    [State]
    op {_} : OComps -> State {constr} .
}

mod! FQLOCK {
    pr(STATE)
    vars T T1 T2 : Tid .
    vars Q1 Q2 : Queue .
    var OCs : OComps .
    trans [want] : {(queue: Q1) (pc[T]: rs) (tmp[T]: Q2) OCs}
    => {(queue: Q1) (pc[T]: es) (tmp[T]: (Q1 ; T)) OCs} .
    trans [enq] : {(queue: Q1) (pc[T]: es) (tmp[T]: Q2) OCs}
    => {(queue: Q2) (pc[T]: ws) (tmp[T]: Q2) OCs} .
    trans [try] : {(queue: (T ; Q1)) (pc[T]: ws) (tmp[T]: Q2) OCs}
    => {(queue: (T ; Q1)) (pc[T]: cs) (tmp[T]: Q2) OCs} .

    trans [deq1] : {(queue: (T1 ; Q1)) (pc[T]: cs) (tmp[T]: Q2) OCs}
    => {(queue: (T ; Q1)) (pc[T]: ds) (tmp[T]: Q1) OCs} .
    trans [deq2] : {(queue: emq) (pc[T]: cs) (tmp[T]: Q2) OCs}
    => {(queue: emq) (pc[T]: ds) (tmp[T]: emq) OCs} .

    trans [exit] : {(queue: Q1) (pc[T]: ds) (tmp[T]: Q2) OCs}
    => {(queue: Q2) (pc[T]: rs) (tmp[T]: Q2) OCs} .
}

open FQLOCK .
    red {(queue: emq) (pc[t1]: rs) (pc[t2]: rs) (tmp[t1]: emq) (tmp[t2]: emq)} =(1,*)=>* {
        (pc[T1]: cs) (pc[T2]: cs) OCs
    } .
    -- reduce in %FQLOCK : (({ ((pc [ t2 ] : rs) ((pc [ t1 ] : rs) ((tmp [ t1 ] : emq) ((queue: emq) (tmp [ t2 ] : emq))))) }) = ( 1 , * ) =>* ({ ((pc [ T1 ] : cs) ((pc [ T2 ] : cs) OCs)) })):Bool
    -- ** Found [state 0-33] ({ ((pc [ t1 ] : cs) ((queue: t1) ((pc [ t2 ] : cs) ((tmp [ t2 ] : t2) (tmp [ t1 ] : t1))))) }):State
    -- target: ({ ((pc [ T1 ] : cs) ((pc [ T2 ] : cs) OCs)) })
    -- { T2 |-> t2, T1 |-> t1, OCs |-> ((queue: t1) ((tmp [ t2 ] : t2) (tmp [ t1 ] : t1))), Q1 |-> emq, Q2 |-> t1, T |-> t1, OCs |-> ((tmp [ t2 ] : t2) (pc [ t2 ] : cs)) }
    -- { T2 |-> t1, T1 |-> t2, OCs |-> ((queue: t1) ((tmp [ t2 ] : t2) (tmp [ t1 ] : t1))), Q1 |-> emq, Q2 |-> t1, T |-> t1, OCs |-> ((tmp [ t2 ] : t2) (pc [ t2 ] : cs)) }
    -- 
    -- found required number of solutions 1.
    -- (true):Bool
    -- (0.0002 sec for parse, 0.0118 sec for 77 rewrites + 2367 matches, 33 memo hits)
    
    show path 0-33 .
    -- [state 0-0] ({ ((tmp [ t1 ] : emq) ((pc [ t1 ] : rs) ((queue: emq) ((tmp [ t2 ] : emq) (pc [ t2 ] : rs))))) }):State
    --   trans [want]: ({ ((pc [ T ] : rs) ((tmp [ T ] : Q2) ((queue: Q1) OCs))) }) => ({ ((tmp [ T ] : (Q1 ; T)) ((queue: Q1) ((pc [ T ] : es) OCs))) })
    -- [state 0-1] ({ ((pc [ t1 ] : es) ((queue: emq) ((tmp [ t2 ] : emq) ((pc [ t2 ] : rs) (tmp [ t1 ] : t1))))) }):State
    --   trans [want]: ({ ((pc [ T ] : rs) ((tmp [ T ] : Q2) ((queue: Q1) OCs))) }) => ({ ((tmp [ T ] : (Q1 ; T)) ((queue: Q1) ((pc [ T ] : es) OCs))) })
    -- [state 0-3] ({ ((pc [ t2 ] : es) ((queue: emq) ((pc [ t1 ] : es) ((tmp [ t1 ] : t1) (tmp [ t2 ] : t2))))) }):State
    --   trans [enq]: ({ ((pc [ T ] : es) ((tmp [ T ] : Q2) ((queue: Q1) OCs))) }) => ({ ((tmp [ T ] : Q2) ((queue: Q2) ((pc [ T ] : ws) OCs))) })
    -- [state 0-6] ({ ((pc [ t2 ] : ws) ((queue: t2) ((pc [ t1 ] : es) ((tmp [ t1 ] : t1) (tmp [ t2 ] : t2))))) }):State
    --   trans [try]: ({ ((pc [ T ] : ws) ((tmp [ T ] : Q2) ((queue: (T ; Q1)) OCs))) }) => ({ ((tmp [ T ] : Q2) ((queue: (T ; Q1)) ((pc [ T ] : cs) OCs))) })
    -- [state 0-13] ({ ((pc [ t2 ] : cs) ((queue: t2) ((pc [ t1 ] : es) ((tmp [ t1 ] : t1) (tmp [ t2 ] : t2))))) }):State
    --   trans [enq]: ({ ((pc [ T ] : es) ((tmp [ T ] : Q2) ((queue: Q1) OCs))) }) => ({ ((tmp [ T ] : Q2) ((queue: Q2) ((pc [ T ] : ws) OCs))) })
    -- [state 0-23] ({ ((pc [ t1 ] : ws) ((queue: t1) ((pc [ t2 ] : cs) ((tmp [ t2 ] : t2) (tmp [ t1 ] : t1))))) }):State
    --   trans [try]: ({ ((pc [ T ] : ws) ((tmp [ T ] : Q2) ((queue: (T ; Q1)) OCs))) }) => ({ ((tmp [ T ] : Q2) ((queue: (T ; Q1)) ((pc [ T ] : cs) OCs))) })
    -- [state 0-33] ({ ((pc [ t1 ] : cs) ((queue: t1) ((pc [ t2 ] : cs) ((tmp [ t2 ] : t2) (tmp [ t1 ] : t1))))) }):State
    --     { T2 |-> t2, T1 |-> t1, OCs |-> ((queue: t1) ((tmp [ t2 ] : t2) (tmp [ t1 ] : t1))), Q1 |-> emq, Q2 |-> t1, T |-> t1, OCs |-> ((tmp [ t2 ] : t2) (pc [ t2 ] : cs)) }
    --     { T2 |-> t1, T1 |-> t2, OCs |-> ((queue: t1) ((tmp [ t2 ] : t2) (tmp [ t1 ] : t1))), Q1 |-> emq, Q2 |-> t1, T |-> t1, OCs |-> ((tmp [ t2 ] : t2) (pc [ t2 ] : cs)) }

close
